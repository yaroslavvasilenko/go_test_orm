// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrdersBolers(t *testing.T) {
	t.Parallel()

	query := OrdersBolers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrdersBolersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrdersBolers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersBolersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrdersBolers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrdersBolers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersBolersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrdersBolerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrdersBolers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersBolersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrdersBolerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrdersBoler exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrdersBolerExists to return true, but got false.")
	}
}

func testOrdersBolersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ordersBolerFound, err := FindOrdersBoler(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ordersBolerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrdersBolersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrdersBolers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrdersBolersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrdersBolers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrdersBolersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ordersBolerOne := &OrdersBoler{}
	ordersBolerTwo := &OrdersBoler{}
	if err = randomize.Struct(seed, ordersBolerOne, ordersBolerDBTypes, false, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}
	if err = randomize.Struct(seed, ordersBolerTwo, ordersBolerDBTypes, false, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ordersBolerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ordersBolerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrdersBolers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrdersBolersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ordersBolerOne := &OrdersBoler{}
	ordersBolerTwo := &OrdersBoler{}
	if err = randomize.Struct(seed, ordersBolerOne, ordersBolerDBTypes, false, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}
	if err = randomize.Struct(seed, ordersBolerTwo, ordersBolerDBTypes, false, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ordersBolerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ordersBolerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrdersBolers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ordersBolerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrdersBoler) error {
	*o = OrdersBoler{}
	return nil
}

func ordersBolerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrdersBoler) error {
	*o = OrdersBoler{}
	return nil
}

func ordersBolerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrdersBoler) error {
	*o = OrdersBoler{}
	return nil
}

func ordersBolerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrdersBoler) error {
	*o = OrdersBoler{}
	return nil
}

func ordersBolerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrdersBoler) error {
	*o = OrdersBoler{}
	return nil
}

func ordersBolerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrdersBoler) error {
	*o = OrdersBoler{}
	return nil
}

func ordersBolerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrdersBoler) error {
	*o = OrdersBoler{}
	return nil
}

func ordersBolerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrdersBoler) error {
	*o = OrdersBoler{}
	return nil
}

func ordersBolerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrdersBoler) error {
	*o = OrdersBoler{}
	return nil
}

func testOrdersBolersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrdersBoler{}
	o := &OrdersBoler{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrdersBoler object: %s", err)
	}

	AddOrdersBolerHook(boil.BeforeInsertHook, ordersBolerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ordersBolerBeforeInsertHooks = []OrdersBolerHook{}

	AddOrdersBolerHook(boil.AfterInsertHook, ordersBolerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ordersBolerAfterInsertHooks = []OrdersBolerHook{}

	AddOrdersBolerHook(boil.AfterSelectHook, ordersBolerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ordersBolerAfterSelectHooks = []OrdersBolerHook{}

	AddOrdersBolerHook(boil.BeforeUpdateHook, ordersBolerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ordersBolerBeforeUpdateHooks = []OrdersBolerHook{}

	AddOrdersBolerHook(boil.AfterUpdateHook, ordersBolerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ordersBolerAfterUpdateHooks = []OrdersBolerHook{}

	AddOrdersBolerHook(boil.BeforeDeleteHook, ordersBolerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ordersBolerBeforeDeleteHooks = []OrdersBolerHook{}

	AddOrdersBolerHook(boil.AfterDeleteHook, ordersBolerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ordersBolerAfterDeleteHooks = []OrdersBolerHook{}

	AddOrdersBolerHook(boil.BeforeUpsertHook, ordersBolerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ordersBolerBeforeUpsertHooks = []OrdersBolerHook{}

	AddOrdersBolerHook(boil.AfterUpsertHook, ordersBolerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ordersBolerAfterUpsertHooks = []OrdersBolerHook{}
}

func testOrdersBolersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrdersBolers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrdersBolersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ordersBolerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrdersBolers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrdersBolersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrdersBolersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrdersBolerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrdersBolersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrdersBolers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ordersBolerDBTypes = map[string]string{`ID`: `bigint`, `Name`: `character varying`, `Amount`: `integer`, `Price`: `integer`, `UserOrdersID`: `bigint`, `CreatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testOrdersBolersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ordersBolerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ordersBolerAllColumns) == len(ordersBolerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrdersBolers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrdersBolersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ordersBolerAllColumns) == len(ordersBolerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrdersBoler{}
	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrdersBolers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ordersBolerDBTypes, true, ordersBolerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ordersBolerAllColumns, ordersBolerPrimaryKeyColumns) {
		fields = ordersBolerAllColumns
	} else {
		fields = strmangle.SetComplement(
			ordersBolerAllColumns,
			ordersBolerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrdersBolerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrdersBolersUpsert(t *testing.T) {
	t.Parallel()

	if len(ordersBolerAllColumns) == len(ordersBolerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrdersBoler{}
	if err = randomize.Struct(seed, &o, ordersBolerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrdersBoler: %s", err)
	}

	count, err := OrdersBolers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ordersBolerDBTypes, false, ordersBolerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrdersBoler struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrdersBoler: %s", err)
	}

	count, err = OrdersBolers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
