// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsersBoilers(t *testing.T) {
	t.Parallel()

	query := UsersBoilers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsersBoilersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersBoilers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersBoilersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsersBoilers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersBoilers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersBoilersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsersBoilerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersBoilers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersBoilersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsersBoilerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UsersBoiler exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsersBoilerExists to return true, but got false.")
	}
}

func testUsersBoilersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usersBoilerFound, err := FindUsersBoiler(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if usersBoilerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsersBoilersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsersBoilers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsersBoilersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsersBoilers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsersBoilersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usersBoilerOne := &UsersBoiler{}
	usersBoilerTwo := &UsersBoiler{}
	if err = randomize.Struct(seed, usersBoilerOne, usersBoilerDBTypes, false, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}
	if err = randomize.Struct(seed, usersBoilerTwo, usersBoilerDBTypes, false, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usersBoilerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usersBoilerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsersBoilers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsersBoilersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usersBoilerOne := &UsersBoiler{}
	usersBoilerTwo := &UsersBoiler{}
	if err = randomize.Struct(seed, usersBoilerOne, usersBoilerDBTypes, false, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}
	if err = randomize.Struct(seed, usersBoilerTwo, usersBoilerDBTypes, false, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usersBoilerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usersBoilerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersBoilers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usersBoilerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoiler) error {
	*o = UsersBoiler{}
	return nil
}

func usersBoilerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoiler) error {
	*o = UsersBoiler{}
	return nil
}

func usersBoilerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoiler) error {
	*o = UsersBoiler{}
	return nil
}

func usersBoilerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoiler) error {
	*o = UsersBoiler{}
	return nil
}

func usersBoilerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoiler) error {
	*o = UsersBoiler{}
	return nil
}

func usersBoilerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoiler) error {
	*o = UsersBoiler{}
	return nil
}

func usersBoilerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoiler) error {
	*o = UsersBoiler{}
	return nil
}

func usersBoilerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoiler) error {
	*o = UsersBoiler{}
	return nil
}

func usersBoilerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoiler) error {
	*o = UsersBoiler{}
	return nil
}

func testUsersBoilersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsersBoiler{}
	o := &UsersBoiler{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsersBoiler object: %s", err)
	}

	AddUsersBoilerHook(boil.BeforeInsertHook, usersBoilerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usersBoilerBeforeInsertHooks = []UsersBoilerHook{}

	AddUsersBoilerHook(boil.AfterInsertHook, usersBoilerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usersBoilerAfterInsertHooks = []UsersBoilerHook{}

	AddUsersBoilerHook(boil.AfterSelectHook, usersBoilerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usersBoilerAfterSelectHooks = []UsersBoilerHook{}

	AddUsersBoilerHook(boil.BeforeUpdateHook, usersBoilerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usersBoilerBeforeUpdateHooks = []UsersBoilerHook{}

	AddUsersBoilerHook(boil.AfterUpdateHook, usersBoilerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usersBoilerAfterUpdateHooks = []UsersBoilerHook{}

	AddUsersBoilerHook(boil.BeforeDeleteHook, usersBoilerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usersBoilerBeforeDeleteHooks = []UsersBoilerHook{}

	AddUsersBoilerHook(boil.AfterDeleteHook, usersBoilerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usersBoilerAfterDeleteHooks = []UsersBoilerHook{}

	AddUsersBoilerHook(boil.BeforeUpsertHook, usersBoilerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usersBoilerBeforeUpsertHooks = []UsersBoilerHook{}

	AddUsersBoilerHook(boil.AfterUpsertHook, usersBoilerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usersBoilerAfterUpsertHooks = []UsersBoilerHook{}
}

func testUsersBoilersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersBoilers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsersBoilersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usersBoilerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsersBoilers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsersBoilersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsersBoilersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsersBoilerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsersBoilersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsersBoilers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usersBoilerDBTypes = map[string]string{`ID`: `bigint`, `Name`: `character varying`, `Age`: `integer`, `CreatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testUsersBoilersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usersBoilerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usersBoilerAllColumns) == len(usersBoilerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersBoilers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsersBoilersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usersBoilerAllColumns) == len(usersBoilerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoiler{}
	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersBoilers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usersBoilerDBTypes, true, usersBoilerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usersBoilerAllColumns, usersBoilerPrimaryKeyColumns) {
		fields = usersBoilerAllColumns
	} else {
		fields = strmangle.SetComplement(
			usersBoilerAllColumns,
			usersBoilerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsersBoilerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsersBoilersUpsert(t *testing.T) {
	t.Parallel()

	if len(usersBoilerAllColumns) == len(usersBoilerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsersBoiler{}
	if err = randomize.Struct(seed, &o, usersBoilerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsersBoiler: %s", err)
	}

	count, err := UsersBoilers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usersBoilerDBTypes, false, usersBoilerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersBoiler struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsersBoiler: %s", err)
	}

	count, err = UsersBoilers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
