// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolers)
	t.Run("UsersBoilers", testUsersBoilers)
}

func TestDelete(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersDelete)
	t.Run("UsersBoilers", testUsersBoilersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersQueryDeleteAll)
	t.Run("UsersBoilers", testUsersBoilersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersSliceDeleteAll)
	t.Run("UsersBoilers", testUsersBoilersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersExists)
	t.Run("UsersBoilers", testUsersBoilersExists)
}

func TestFind(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersFind)
	t.Run("UsersBoilers", testUsersBoilersFind)
}

func TestBind(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersBind)
	t.Run("UsersBoilers", testUsersBoilersBind)
}

func TestOne(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersOne)
	t.Run("UsersBoilers", testUsersBoilersOne)
}

func TestAll(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersAll)
	t.Run("UsersBoilers", testUsersBoilersAll)
}

func TestCount(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersCount)
	t.Run("UsersBoilers", testUsersBoilersCount)
}

func TestHooks(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersHooks)
	t.Run("UsersBoilers", testUsersBoilersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersInsert)
	t.Run("OrdersBolers", testOrdersBolersInsertWhitelist)
	t.Run("UsersBoilers", testUsersBoilersInsert)
	t.Run("UsersBoilers", testUsersBoilersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersReload)
	t.Run("UsersBoilers", testUsersBoilersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersReloadAll)
	t.Run("UsersBoilers", testUsersBoilersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersSelect)
	t.Run("UsersBoilers", testUsersBoilersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersUpdate)
	t.Run("UsersBoilers", testUsersBoilersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("OrdersBolers", testOrdersBolersSliceUpdateAll)
	t.Run("UsersBoilers", testUsersBoilersSliceUpdateAll)
}
